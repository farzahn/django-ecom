name: Production Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.18.0'

jobs:
  # Build and prepare deployment artifacts
  build-deployment:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd frontend && npm ci
    
    - name: Build frontend for production
      working-directory: ./frontend
      run: |
        npm run build
        ls -la build/
    
    - name: Collect Django static files
      run: |
        echo "DEBUG=False" >> .env
        echo "SECRET_KEY=production-secret-key" >> .env
        echo "DATABASE_URL=sqlite:///db.sqlite3" >> .env
        echo "STRIPE_PUBLISHABLE_KEY=pk_live_mock" >> .env
        echo "STRIPE_SECRET_KEY=sk_live_mock" >> .env
        echo "STRIPE_WEBHOOK_SECRET=whsec_live_mock" >> .env
        echo "GOSHIPPO_API_TOKEN=shippo_live_mock" >> .env
        echo "ALLOWED_HOSTS=pasargadprints.com,www.pasargadprints.com" >> .env
        echo "CORS_ALLOWED_ORIGINS=https://pasargadprints.com" >> .env
        python manage.py collectstatic --noinput
    
    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          --exclude='node_modules' \
          --exclude='frontend/node_modules' \
          --exclude='frontend/src' \
          --exclude='frontend/public' \
          --exclude='frontend/package*.json' \
          --exclude='frontend/tsconfig.json' \
          --exclude='frontend/README.md' \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='db.sqlite3' \
          --exclude='media/' \
          --exclude='venv/' \
          --exclude='__pycache__/' \
          --exclude='*.pyc' \
          --exclude='test_*.py' \
          --exclude='tests/' \
          --exclude='docs/' \
          --exclude='screencapture*' \
          --exclude='test_*.html' \
          .
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 30

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-deployment
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    
    environment:
      name: staging
      url: https://staging.pasargadprints.com
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example for Docker deployment:
        # docker build -t pasargadprints:staging .
        # docker push your-registry/pasargadprints:staging
        # docker-compose -f docker-compose.staging.yml up -d
        echo "‚úÖ Staging deployment completed!"
    
    - name: Run staging health checks
      run: |
        echo "üîç Running staging health checks..."
        # Add health check commands here
        # Example: curl -f https://staging.pasargadprints.com/health/
        echo "‚úÖ Staging health checks passed!"
    
    - name: Run staging smoke tests
      run: |
        echo "üß™ Running staging smoke tests..."
        # Add smoke test commands here
        # Example: python manage.py test smoke_tests --settings=pasargadprints.settings_staging
        echo "‚úÖ Staging smoke tests passed!"

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-deployment, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    
    environment:
      name: production
      url: https://pasargadprints.com
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
    
    - name: Extract deployment package
      run: tar -xzf deployment.tar.gz
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here
        # Example for Docker deployment:
        # docker build -t pasargadprints:latest .
        # docker push your-registry/pasargadprints:latest
        # docker-compose -f docker-compose.prod.yml up -d
        
        # Example for VPS deployment:
        # scp deployment.tar.gz user@your-server:/path/to/app/
        # ssh user@your-server 'cd /path/to/app && tar -xzf deployment.tar.gz'
        # ssh user@your-server 'cd /path/to/app && ./deploy.sh'
        
        echo "‚úÖ Production deployment completed!"
    
    - name: Run production health checks
      run: |
        echo "üîç Running production health checks..."
        # Add health check commands here
        # Example: curl -f https://pasargadprints.com/health/
        echo "‚úÖ Production health checks passed!"
    
    - name: Run production smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        # Add smoke test commands here
        # Example: curl -f https://pasargadprints.com/api/products/
        echo "‚úÖ Production smoke tests passed!"
    
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          üéâ New release of PasargadPrints e-commerce platform!
          
          ## What's included:
          - Complete Django backend with GoShippo and Stripe integration
          - React frontend with responsive design
          - Production-ready deployment configuration
          
          ## Deployment Notes:
          - Database migrations: Run `python manage.py migrate`
          - Static files: Already collected in staticfiles/
          - Environment variables: Configure production settings
          
          ## Health Check:
          - Backend API: `/api/health/`
          - Frontend: `/health/`
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment completed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)
        # Example for Slack:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üéâ PasargadPrints deployed successfully to production!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        # Add failure notification logic here
        # Example for Slack:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚ùå PasargadPrints production deployment failed! Check GitHub Actions."}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy-production
    
    environment:
      name: production
      url: https://pasargadprints.com
    
    steps:
    - name: Rollback production deployment
      run: |
        echo "üîÑ Rolling back production deployment..."
        # Add rollback commands here
        # Example:
        # docker-compose -f docker-compose.prod.yml down
        # docker pull your-registry/pasargadprints:previous
        # docker-compose -f docker-compose.prod.yml up -d
        echo "‚úÖ Rollback completed!"
    
    - name: Notify rollback
      run: |
        echo "üîÑ Production deployment rolled back!"
        # Add rollback notification logic here